What is Git and why is it used?
Git is the most popular, open-source, widely used, and an example of distributed version control system (DVCS) 
used for handling the development of small and large projects in a more efficient and neat manner.

Scope of Git:
Due to a well-established version control system and the support for collaborative work, 
git has garnered wide popularity not just amongst the software developers, but also among the people who do other tasks like 
documentation or any other collaborative work. It can seem challenging at first, but once we get the hang of git, 
we find that it makes our lives much simpler.
It has an amazing branching system that supports nonlinear development along with keeping the developers accountable for their code.
 This helps in making the development process efficient and faster.

1. What is a git repository?
A repository is a file structure where git stores all the project-based files. Git can either stores the files on the local or the remote repository.

"Git stores files locally" means Git tracks, versions, and stores all changes in a special hidden folder (.git) on your machine,
 even before you ever push to GitHub or any remote server.

2. What does git clone do?
The command creates a copy (or clone) of an existing git repository. Generally, it is used to get a copy of the remote repository to the local repository.

3. What does the command git config do?
The git config command is a convenient way to set configuration options for defining the behavior of the repository, user information and preferences, git installation-based configurations, and many such things. 

For example:
To set up your name and email address before using git commands, we can run the below commands:

git config --global
user.name
“<<your_name>>”
 
git config --global user.email “<<your_email>>”

4. Can you explain head in terms of git and also tell the number of heads that can be present in a repository?
A head is nothing but a reference to the last commit object of a branch.
For every repository, there will always be a default head referred to as “master” or now “main” (as per GitHub) but there is no restriction to the count of heads available. In other words, it can have any number of heads.
Usages:

- To go or checkout to 1 commit before the latest commit, we use git checkout HEAD~1

- To uncommit the last 3 commits without losing the changes, we first run git reset HEAD~3. Then we can see the changes made in the last 3 commits and then update it manually and commit it finally.

- In order to uncommit the last 3 commits and also remove the changes, we can run the command: git reset --hard HEAD~3. This command will completely remove all the changes.

- To look into the changes made in the last 3 commits, we can run git diff HEAD~3

- To make a new commit by reverting the last 3 commits, we can run the command: git revert --no-commit HEAD~3...HEAD

Doubt: What is meaning of having multiple Heads in git repository?
ChatGpt Answer: These are temporary HEAD-like references Git uses to remember things during operations. You're still in one HEAD, but Git maintains extra metadata to manage state.

🧪 Summary Table

Term	Meaning
HEAD	Current branch or commit
ORIG_HEAD	Where you were before the last dangerous operation
MERGE_HEAD	Target commit being merged
REBASE_HEAD	Commit being replayed during rebase
worktree HEAD	Another HEAD in a secondary checkout

Detached HEAD state
Sometimes, you’re not on a branch — you’re on a specific commit.
git checkout <commit-hash>
Now HEAD is not pointing to a branch — it’s pointing to a commit hash directly.

Concept	Description
git worktree	Creates an additional working directory for a branch or commit
Use case	Work on multiple branches at once, no switching needed
Advantage	Saves time, avoids stash/checkout loops, reuses the same repo
Shortcut for	Safe parallel development or testing

5. What is a conflict?
Git usually handles feature merges automatically but sometimes while working in a team environment, there might be cases of conflicts such as:

1. When two separate branches have changes to the same line in a file
2. A file is deleted in one branch but has been modified in the other.
 
These conflicts have to be solved manually after discussion with the team as git will not be able to predict what and whose changes have to be given precedence.

6. What is the functionality of git ls-tree?
Answer: 👉 It's a Git command used to list the contents of a tree object (a snapshot of the directory at a commit).
When you run:

bash
Copy
Edit
git ls-tree <commit-ish>
It shows the tree structure (files and folders) of that commit, including:

The mode (file permissions / type)

The type (blob or tree)

The SHA-1 hash (object ID)

The file/folder name

🧪 Example
Let’s say your repo has:

css
Copy
Edit
main.txt
src/
 └── App.java
And you run:

bash
Copy
Edit
git ls-tree HEAD
You might get output like:

css
Copy
Edit
100644 blob a8f5f167f44f4964e6c998dee827110c main.txt
040000 tree b1c0b8b7d3d87d6a3f34f582b15e0f18 src
🔍 Breakdown:

Field	Meaning
100644	File mode (regular file)
blob	Type of Git object (file = blob, folder = tree)
a8f5...	SHA-1 hash of the object (content-based ID)
main.txt	File name
blob → actual file

tree → directory (which can be inspected further with git ls-tree <tree-sha>)

🌲 Tree vs Blob in Git
Git doesn’t store full copies of files every time.

Files are stored as blobs

Folders are stored as trees

Each commit points to a tree (representing the file structure)

git ls-tree lets you explore this structure manually.

🔄 Usage Variants
See a subdirectory’s contents:
bash
Copy
Edit
git ls-tree HEAD:src
See a specific tree SHA:
bash
Copy
Edit
git ls-tree b1c0b8b7d3d87d6a3f34f582b15e0f18


🧠 Why it’s useful
Inspect file structure of any commit

Debug why a file exists in a commit

Understand Git’s internal storage model

7. What does git status do?

It shows the current state of your working directory and the staging area.

This includes:

What changes are staged for commit

What changes are not staged (i.e., modified but not yet added)

Which files are untracked

If you’re in a special state (e.g., merge, rebase, detached HEAD)

🔧 Breakdown:

Section	Meaning
"On branch main"	Shows the current branch
"Changes to be committed"	Files you added with git add (they are in the staging area)
"Changes not staged for commit"	Files that are modified, but not yet added (git add needed)
"Untracked files"	New files that Git isn’t tracking yet
🧠 When to use it?
After editing files — to see what you changed

Before committing — to verify what’s staged

During merges — to check for conflicts or special states

